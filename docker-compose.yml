services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: database
    environment:
      POSTGRES_DB: ${DB_NAME:-student_management}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "0.0.0.0:${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - student-network

  # Backend API
  backend:
    build: ./backend
    container_name: backend
    env_file:
      - ./backend/.env
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT:-5000}
      HOST: 0.0.0.0
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-student_management}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      CORS_ORIGIN: http://frontend:80,http://localhost:3000,http://0.0.0.0:3000
    ports:
      - "0.0.0.0:${PORT:-5000}:5000"
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - student-network

  # Frontend
  frontend:
    build: ./frontend
    container_name: frontend
    env_file:
      - ./frontend/.env
    environment:
      REACT_APP_API_URL: http://backend:5000/api
      REACT_APP_BUILD_ENV: docker
      REACT_APP_HOST: 0.0.0.0
    ports:
      - "0.0.0.0:${FRONTEND_PORT:-3000}:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - student-network

volumes:
  postgres_data:

networks:
  student-network:
    driver: bridge
